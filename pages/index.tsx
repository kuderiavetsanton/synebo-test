import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import styled from "styled-components";
import colors from "../styles/colors.module.scss";
import Form from "../components/Form";
import { useState } from "react";
import TodoListItem from "../components/TodoListItem";
import {
  DndContext,
  closestCenter,
  KeyboardSensor,
  PointerSensor,
  useSensor,
  useSensors,
  DragEndEvent,
} from "@dnd-kit/core";
import {
  arrayMove,
  SortableContext,
  sortableKeyboardCoordinates,
  verticalListSortingStrategy,
} from "@dnd-kit/sortable";

const Container = styled.div`
  width: 100%;
  background-image: url("/bg-mobile-light.jpg");
  background-repeat: no-repeat;
  background-size: 100% auto;
  min-height: 100vh;
  display: flex;
  background-color: ${colors.veryLightGray};
`;

const Main = styled.main`
  margin: 50px auto;
  max-width: 340px;
  width: 100%;
`;

const Header = styled.header`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

const Title = styled.h1`
  font-size: 1.75rem;
  letter-spacing: 0.5rem;
  color: ${colors.veryLightGray};
  margin: 0;
`;

const TodoListContainer = styled.ul`
  border-radius: 8px;
  background-color: #fff;
  padding: 0;
`;

export interface TodoItem {
  label: string;
  completed: boolean;
  id: string;
}

export default function Home() {
  const [todos, setTodos] = useState<TodoItem[]>([]);

  const sensors = useSensors(
    useSensor(PointerSensor),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    })
  );

  function handleDragEnd(event: DragEndEvent) {
    const { active, over } = event;

    if (over && active.id !== over.id) {
      setTodos((items) => {
        const oldIndex = items.findIndex(
          (todoItem) => active.id === todoItem.id
        );
        const newIndex = items.findIndex((todoItem) => over.id === todoItem.id);

        return arrayMove(items, oldIndex, newIndex);
      });
    }
  }
  return (
    <>
      <Head>
        <title>Todo list</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.png" />
      </Head>
      <Container>
        <Main>
          <Header>
            <Title>TODO</Title>
            <Image
              src="/icon-moon.svg"
              alt="Theme icon"
              width={26}
              height={26}
            ></Image>
          </Header>
          <Form
            handleSubmit={(e, value) => {
              setTodos([...todos, value]);
            }}
          />
          <DndContext
            sensors={sensors}
            collisionDetection={closestCenter}
            onDragEnd={handleDragEnd}
          >
            <SortableContext
              items={todos}
              strategy={verticalListSortingStrategy}
            >
              <TodoListContainer>
                {todos.map((currentItem, index) => {
                  return (
                    <TodoListItem
                      key={index}
                      item={currentItem}
                      onDelete={() => {
                        const newTodo = todos.filter(
                          (todo) => todo.id !== currentItem.id
                        );
                        setTodos(newTodo);
                      }}
                      onCompleted={(val) => {
                        const newTodo = todos.map((todo) => {
                          if (todo.id === currentItem.id) {
                            return { ...todo, completed: val };
                          }
                          return todo;
                        });
                        setTodos(newTodo);
                      }}
                    ></TodoListItem>
                  );
                })}
              </TodoListContainer>
            </SortableContext>
          </DndContext>
        </Main>
      </Container>
    </>
  );
}
